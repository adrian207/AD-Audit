# Azure DevOps Pipeline for Ad-Audit
# Author: Adrian Johnson

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - 'Modules/**'
      - 'Libraries/**'
      - 'Tests/**'
      - '*.ps1'

pr:
  branches:
    include:
      - main
      - develop

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
  - stage: Test
    displayName: 'Test Stage'
    jobs:
      - job: PesterTests
        displayName: 'Run Pester Tests'
        steps:
          - checkout: self
            displayName: 'Checkout code'
          
          - pwsh: |
              Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
              Write-Host "OS: $($PSVersionTable.OS)"
            displayName: 'Display Environment Info'
          
          - pwsh: |
              Write-Host "Installing Pester 5.x..."
              Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser -MinimumVersion 5.0.0
              Import-Module Pester -PassThru
            displayName: 'Install Pester'
          
          - pwsh: |
              cd Tests
              $result = ./RunTests.ps1 -OutputFormat NUnitXml -CodeCoverage -PassThru
              
              # Output results for pipeline
              Write-Host "##vso[task.setvariable variable=TestsPassed]$($result.PassedCount)"
              Write-Host "##vso[task.setvariable variable=TestsFailed]$($result.FailedCount)"
              Write-Host "##vso[task.setvariable variable=TestsTotal]$($result.TotalCount)"
              
              if ($result.FailedCount -gt 0) {
                Write-Error "##vso[task.logissue type=error]$($result.FailedCount) test(s) failed"
                exit 1
              }
            displayName: 'Run Pester Tests'
            continueOnError: false
          
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '**/TestResults.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)/Tests'
              mergeTestResults: true
              testRunTitle: 'Pester Tests'
              failTaskOnFailedTests: true
          
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            condition: always()
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/Tests/coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/Tests/TestResults'
              failIfCoverageEmpty: false
          
          - pwsh: |
              Write-Host "Test Summary:" -ForegroundColor Cyan
              Write-Host "  Total: $(TestsTotal)" -ForegroundColor White
              Write-Host "  Passed: $(TestsPassed)" -ForegroundColor Green
              Write-Host "  Failed: $(TestsFailed)" -ForegroundColor $(if([int]$env:TESTSFAILED -gt 0){'Red'}else{'Green'})
            displayName: 'Display Test Summary'
            condition: always()
      
      - job: ScriptAnalyzer
        displayName: 'PowerShell Script Analyzer'
        steps:
          - checkout: self
            displayName: 'Checkout code'
          
          - pwsh: |
              Write-Host "Installing PSScriptAnalyzer..."
              Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
            displayName: 'Install PSScriptAnalyzer'
          
          - pwsh: |
              Write-Host "Running PSScriptAnalyzer..."
              
              $results = Invoke-ScriptAnalyzer `
                -Path $(System.DefaultWorkingDirectory) `
                -Recurse `
                -Settings PSGallery `
                -Severity Error,Warning `
                -ExcludeRule PSAvoidUsingWriteHost
              
              if ($results) {
                Write-Host "Issues found:" -ForegroundColor Yellow
                $results | Format-Table -AutoSize
                
                $errorCount = ($results | Where-Object Severity -eq 'Error').Count
                $warningCount = ($results | Where-Object Severity -eq 'Warning').Count
                
                Write-Host ""
                Write-Host "Summary:" -ForegroundColor Cyan
                Write-Host "  Errors: $errorCount" -ForegroundColor $(if($errorCount -gt 0){'Red'}else{'Green'})
                Write-Host "  Warnings: $warningCount" -ForegroundColor Yellow
                
                # Set variables for reporting
                Write-Host "##vso[task.setvariable variable=LintErrors]$errorCount"
                Write-Host "##vso[task.setvariable variable=LintWarnings]$warningCount"
                
                if ($errorCount -gt 0) {
                  Write-Host "##vso[task.logissue type=error]Found $errorCount error(s)"
                  exit 1
                }
              } else {
                Write-Host "✓ No issues found!" -ForegroundColor Green
                Write-Host "##vso[task.setvariable variable=LintErrors]0"
                Write-Host "##vso[task.setvariable variable=LintWarnings]0"
              }
            displayName: 'Run Script Analyzer'
            continueOnError: false

  - stage: Package
    displayName: 'Package Stage'
    dependsOn: Test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - job: CreatePackage
        displayName: 'Create PowerShell Module Package'
        steps:
          - checkout: self
            displayName: 'Checkout code'
          
          - pwsh: |
              Write-Host "Creating module package..."
              
              $modulePath = "$(Build.ArtifactStagingDirectory)/AD-Audit"
              
              # Create module directory structure
              New-Item -ItemType Directory -Path $modulePath -Force
              New-Item -ItemType Directory -Path "$modulePath/Modules" -Force
              New-Item -ItemType Directory -Path "$modulePath/Libraries" -Force
              New-Item -ItemType Directory -Path "$modulePath/Utilities" -Force
              New-Item -ItemType Directory -Path "$modulePath/Tests" -Force
              New-Item -ItemType Directory -Path "$modulePath/docs" -Force
              New-Item -ItemType Directory -Path "$modulePath/wwwroot" -Force
              
              # Copy files
              Copy-Item -Path "*.ps1" -Destination $modulePath -Force
              Copy-Item -Path "*.psd1" -Destination $modulePath -Force -ErrorAction SilentlyContinue
              Copy-Item -Path "*.md" -Destination $modulePath -Force
              Copy-Item -Path "Modules/*" -Destination "$modulePath/Modules/" -Recurse -Force
              Copy-Item -Path "Libraries/*" -Destination "$modulePath/Libraries/" -Recurse -Force
              Copy-Item -Path "Utilities/*" -Destination "$modulePath/Utilities/" -Recurse -Force
              Copy-Item -Path "Tests/*" -Destination "$modulePath/Tests/" -Recurse -Force
              Copy-Item -Path "docs/*" -Destination "$modulePath/docs/" -Recurse -Force
              Copy-Item -Path "wwwroot/*" -Destination "$modulePath/wwwroot/" -Recurse -Force
              
              Write-Host "✓ Module package created at: $modulePath" -ForegroundColor Green
            displayName: 'Package Module'
          
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Module Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'AD-Audit-Module'
              publishLocation: 'Container'
          
          - pwsh: |
              Write-Host "Build Summary:" -ForegroundColor Cyan
              Write-Host "  Branch: $(Build.SourceBranchName)" -ForegroundColor White
              Write-Host "  Commit: $(Build.SourceVersion)" -ForegroundColor White
              Write-Host "  Build: $(Build.BuildNumber)" -ForegroundColor White
            displayName: 'Build Summary'

  - stage: Notify
    displayName: 'Notification Stage'
    dependsOn: [Test, Package]
    condition: always()
    jobs:
      - job: SendNotification
        displayName: 'Send Build Notification'
        steps:
          - pwsh: |
              $status = if ('${{ dependencies.Test.result }}' -eq 'Succeeded' -and '${{ dependencies.Package.result }}' -eq 'Succeeded') { 
                "✓ SUCCESS" 
              } else { 
                "✗ FAILED" 
              }
              
              Write-Host "Build Status: $status" -ForegroundColor $(if($status -like '*SUCCESS*'){'Green'}else{'Red'})
              Write-Host "Pipeline: $(Build.DefinitionName)" -ForegroundColor Cyan
              Write-Host "Build: $(Build.BuildNumber)" -ForegroundColor Cyan
              Write-Host "Branch: $(Build.SourceBranchName)" -ForegroundColor Cyan
            displayName: 'Build Status'

